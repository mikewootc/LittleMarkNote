<!-- Form box with confirm box, but without popup modal  -->
<template>
  <lm-confirm-box class="" :title="title">
    <li-input v-for="it in formItems"> </li-input>
  </lm-confirm-box>
</template>

<script setup lang="ts">
import { ref, onMounted, reactive } from 'vue';
import { useI18n } from 'vue-i18n';
// @ts-ignore
import Logger from 'cpclog';
import LmConfirmBox from './LmConfirmBox.vue';

const logger = Logger.createWrapper('LmConfirmForm', Logger.LEVEL_DEBUG);

defineProps<{
  title: string;
  formItems: Array<{ label: string; placeHolder: string }>;
}>();
const confirm = ref(true);
let folderTree = reactive([]);
let selectedKey = reactive([]);
let selectedFolder = ref('/');

onMounted(async () => {
  try {
  } catch (error) {
    logger.error('error:', error);
    throw error;
  }
});

async function onSelectedFolder(absolutePath: string) {
  logger.debug('onSelectedFolder:', absolutePath);
  selectedFolder.value = absolutePath;

  //let dir = await MyFsClient.browseDir(absolutePath);
  //logger.debug('dir:', dir);
  //store.viewType = 'nodes'
  //setSelectedFolder(absolutePath)
  //await filterContents(await walkFolders(absolutePath))
  //// in case this came from breadcrumbs component
  //expandTree(absolutePath)
}

async function onLazyLoad({ node, key, done, fail }) {
  logger.debug('onLazyLoad############## node:', node, 'key:', key, 'node:', node, 'fail:', fail);
  try {
    let lstDirContents = await browseDir(node.path);
    logger.debug('dir:', lstDirContents);
    done(lstDirContents);
    return;
  } catch (error) {
    logger.error('onLazyLoad error:', error);
    done([]);
    return;
    //throw error;
  }
}

async function browseDir(path: string) {
  logger.debug('browseDir_. enter:', path);
  try {
    let lstDirContents = await MyFsClient.browseDir(path);
    logger.debug('browseDir_. enter:', lstDirContents);
    lstDirContents.forEach((it, ix) => {
      it.header = 'generic';
      it.iconColor = 'gray';
      if (it.isDir) {
        it.icon = 'folder';
        it.iconColor = '#ffd76a';
      } else if (it.name.endsWith('.mp4') || it.name.endsWith('.flv')) {
        it.icon = 'ondemand_video';
        it.iconColor = 'lightblue';
      } else {
        it.icon = 'description';
      }
    });
    return lstDirContents;
  } catch (error) {
    logger.error('browseDir_ error:', error);
    throw error;
  }
}

async function createDir(parentPath: string, name: string) {
  logger.debug('createDir_. enter:', parentPath, name);
  try {
    let res = await MyFsClient.createDir(parentPath, name);
    return res;
  } catch (error) {
    logger.error('createDir_ error:', error);
    throw error;
  }
}
</script>

<style scoped>
.file-selector-inner {
  width: 800px;
  /* max-width: 90vw; */
  height: 650px;
  background-color: #fff;

  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.page-header {
  width: 100%;
  height: 40px;
  background-color: #007acc;

  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: center;
}

.selected-folder-line {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: center;
}

.file-selector-selected-folder {
  flex: 1;
  margin-left: 10px;
}

.file-selector-new-folder {
  justify-self: flex-end;
}

.file-selector-dir-tree {
  overflow: scroll;
  height: 100%;
}
</style>
